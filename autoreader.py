from telethon.tl.types import Message
from .. import loader,utils

__version__ = (0,1,5)
# meta developer: @BruhHikkaModules

@loader.tds
class Autoreader(loader.Module):
    """–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Ç–∞–Ω–∏—è –≤ —á–∞—Ç–∞—Ö –∏ –ª—Å"""
    strings = {"name": "Autoreader"}

    async def client_ready(self,client,db):
        self.db = db
        self._chats = self.pointer("chats",[])
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "read_new_msg_new_users",
                False,
                "–ß–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ-—É–ª–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :(",
                validator=loader.validators.Boolean()
            )
        )
    
    @loader.watcher()
    async def watcher(self,message):
        if message.chat_id in self._chats:
            message_id = message.id
            await self.client.send_read_acknowledge(message.chat_id,clear_mentions=True)

    @loader.command()
    async def autoread(self, message: Message):
        """ - –î–æ–±–∞–≤–∏—Ç—å / –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –∞–≤—Ç–æ —á–∏—Ç–∞–µ–º—ã—Ö"""
        added = None
        removed = None
        if message.chat_id not in self._chats:
            self._chats.append(message.chat_id)
            added = True
        elif message.chat_id in self._chats:
            self._chats.remove(message.chat_id)
            removed = True
        if added:
            await utils.answer(message,"–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ —á–∏—Ç–∞–µ–º—ã–µ")
        elif removed:
            await utils.answer(message,"–ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∞–≤—Ç–æ —á–∏—Ç–∞–µ–º—ã—Ö")
    @loader.command()
    async def list_autoread(self,message):
        ''' - –ß–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Ç–∞—é—Ç—Å—è'''
        chats_wha = self.get("chats",[])
        r = str(chats_wha).replace("[","")
        m = r.replace("]","")
        ov = m.replace(" ","")
        hg = ov.replace(",","\n")
        chats = f"üëÅ <b>–ê–≤—Ç–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:</b>\n{hg}"
        await utils.answer(message,chats)

    @loader.command()
    async def set_autoread(self,message):
        ''' - [–ê–π–¥–∏] –î–æ–±–∞–≤–∏—Ç—å / –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ —á–∏—Ç–∞–µ–º—ã—Ö
            p.s -100 –∫ –Ω–∞—á–∞–ª—É –∞–π–¥–∏ —É –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤'''
        args = utils.get_args_raw(message)

        try:
            value = int(str(value).strip())
        except Exception:
            await utils.answer(message,"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–π–¥–∏!")

        if str(value).startswith("-100"):
            value = int(str(value)[4:])
        else:
            await self.client.send_read_acknowledge(int(args),clear_mentions=True)

        if value > 2**64 - 1 or value < 0:
            await utils.answer(message,"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–π–¥–∏!")
        else:
            await self.client.send_read_acknowledge(int(args),clear_mentions=True)
        
    @loader.command()
    async def read(self,message):
        ''' - [–ê–π–¥–∏ \ –ù–∏—á–µ–≥–æ] –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ'''
        args = utils.get_args_raw(message)
        if args != "":
            try:
                value = int(str(value).strip())
            except Exception:
                await utils.answer(message,"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–π–¥–∏!")
                
            if str(value).startswith("-100"):
                value = int(str(value)[4:])
            else:
                await self.client.send_read_acknowledge(int(args),clear_mentions=True)
                
            if value > 2**64 - 1 or value < 0:
                await utils.answer(message,"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–π–¥–∏!")
            else:
                await self.client.send_read_acknowledge(int(args),clear_mentions=True)
        else:
            await self.client.send_read_acknowledge(message.chat_id,clear_mentions=True)
            await message.delete()

    
