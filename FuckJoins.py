from hikkatl.types import Message
from .. import loader, utils
import tempfile
import requests
import re
import string
import random
import logging

"""
    ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  
    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà  
    ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 


    FuckJoins
    üìú Licensed under the GNU AGPLv3	
"""

# meta banner: link
# meta desc: Tired of entering channels without your knowledge via JoinChannelRequest?\nThen use this module! You can remove all such requests with one command from the module (file or raw).

# meta developer: @BruhHikkaModules

logger = logging.getLogger(__name__)


@loader.tds
class FuckJoins(loader.Module):
    """Tired of entering channels without your knowledge via JoinChannelRequest?
    Then use this module! You can remove all such requests with one command from the module (file or raw).
    """

    strings = {
        "name": "FuckJoins",
        "wait": "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>Wait, there is a cleanup of JoinChannelRequest requests in progress</b>",
    }
    strings_ru = {
        "_cls_doc": (
            "–ù–∞–¥–æ–µ–ª–∏ –≤—Ö–æ–¥—ã –≤ –∫–∞–Ω–∞–ª—ã –±–µ–∑ –≤–∞—à–µ–≥–æ –≤–µ–¥–æ–º–∞ —Å –ø–æ–º–æ—â—å—é JoinChannelRequest?\n"
            "–¢–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å! –í—ã –º–æ–∂–µ—Ç–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –º–æ–¥—É–ª—è (—Ñ–∞–π–ª–∞, –ª–∏–±–æ raw) —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã."
        ),
        "wait": "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>–û–∂–∏–¥–∞–π, –∏–¥—ë—Ç –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ JoinChannelRequest</b>",
        "no-args-reply": "<emoji document_id=5447644880824181073>‚ö†Ô∏è</emoji> <b>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ñ–∞–π–ª, –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>",
    }

    async def client_ready(self, client, db):
        self._common = await self.import_lib(
            "https://raw.githubusercontent.com/MuRuLOSE/HikkaModulesRepo/main/libaries/common.py",
            suspend_on_error=True
        )

    def get_username(self, string):
        pattern = "(.*)"
        match = re.search(pattern, string, re.DOTALL)
        if match:
            return match.group(1)
        else:
            logging.info("No match")


    @loader.command(
        ru_doc="[–û—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª / —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—ã—Ä–æ–π –∫–æ–¥ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)] - –ó–∞–º–µ–Ω–∏—Ç—å JoinChannelRequest –Ω–∞ self.request_join",
    )
    async def rjoinsrjoin(self, message: Message):
        """ [Reply to file / link to raw code (not work)] - Replace JoinChannelRequest to self.request_join"""
        pattern = r'(await\s+client|self\.client|self\._client)\(JoinChannelRequest\([^)]*\)\)'

        args = utils.get_args_raw(message)

        await utils.answer(message, self.strings("wait"))

        if not args:
            reply = await message.get_reply_message()

            if not reply:
                return await utils.answer(self.strings["no-args-reply"])
            else:
                username = ""
                with tempfile.TemporaryDirectory() as tmpdir:
                    characters = string.ascii_letters + string.digits
                    filename = "".join(random.choice(characters) for _ in range(32))
                    path = tmpdir + "/" + filename
                    await reply.download_media(path)
                    with open(path + ".py", "r") as f:
                        code = f.read()
                        match = re.search("JoinChannelRequest\((.*?)\)", code)
                        if match:
                            jcr_str = match.group(1)
                            username = self.get_username(jcr_str)
                            new_code = re.sub(pattern, f"await self.request_join({username}, 'The city can sleep easy, because the FuckJoins module has destroyed the nasty JoinChannelRequest.')", code)
                    with open(path + ".py", "w") as f:
                        f.write(new_code)
                    await self.client.send_file(
                        message.chat_id,
                        file=path + ".py",
                        caption=f"–í–æ—Ç –≤–∞—à –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å {(reply).media.document.attributes[0].file_name}!",
                        reply_to=await self._common._topic_resolver(message) or None
                    )

        else:
            code = (await utils.run_sync(requests.get, args)).content.decode()

            match = re.search("JoinChannelRequest\((.*?)\)", code)
            if match:
                jcr_str = match.group(1)
                username = self.get_username(jcr_str)
                new_code = re.sub(pattern, f"await self.request_join({username}, 'The city can sleep easy, because the FuckJoins module has destroyed the nasty JoinChannelRequest.')", code)

            with tempfile.TemporaryDirectory() as tmpdir:
                characters = string.ascii_letters + string.digits
                filename = "".join(random.choice(characters) for _ in range(32))
                path = tmpdir + "/" + filename + ".py"
                with open(path, "x") as f:
                    f.write(new_code)
                return await self.client.send_file(
                    message.chat_id,
                    file=path,
                    caption=f"–í–æ—Ç –≤–∞—à –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å {args}!",
                    reply_to=await self._common._topic_resolver(message) or None
                )

    @loader.command(
        ru_doc="[–û—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª / —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—ã—Ä–æ–π –∫–æ–¥] - –£–¥–∞–ª–∏—Ç—å JoinChannelRequest",
    )
    async def removejoins(self, message: Message):
        """[Reply to file / link to raw code] - Remove JoinChannelRequest"""
        pattern = r'(await\s+client|self\.client|self\._client)\(JoinChannelRequest\([^)]*\)\)'

        args = utils.get_args_raw(message)

        await utils.answer(message, self.strings("wait"))

        if not args:
            reply = await message.get_reply_message()

            if not reply:
                return await utils.answer(self.strings["no-args-reply"])
            else:
                with tempfile.TemporaryDirectory() as tmpdir:
                    characters = string.ascii_letters + string.digits
                    filename = "".join(random.choice(characters) for _ in range(32))
                    path = tmpdir + "/" + filename
                    await reply.download_media(path)
                    with open(path + ".py", "r") as f:
                        code = f.read()
                    new_code = re.sub(pattern, "", code)
                    with open(path + ".py", "w") as f:
                        f.write(new_code)
                    await self.client.send_file(
                        message.chat_id,
                        file=path + ".py",
                        caption=f"–í–æ—Ç –≤–∞—à –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å {(reply).media.document.attributes[0].file_name}!",
                        reply_to=await self._common._topic_resolver(message) or None
                    )

        else:
            code = (await utils.run_sync(requests.get, args)).content.decode()

            new_code = re.sub(pattern, "", code)

            with tempfile.TemporaryDirectory() as tmpdir:
                characters = string.ascii_letters + string.digits
                filename = "".join(random.choice(characters) for _ in range(32))
                path = tmpdir + "/" + filename + ".py"
                with open(path, "x") as f:
                    f.write(new_code)
                return await self.client.send_file(
                    message.chat_id,
                    file=path,
                    caption=f"–í–æ—Ç –≤–∞—à –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å {args}!",
                    reply_to=await self._common._topic_resolver(message) or None
                )
