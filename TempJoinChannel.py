from telethon.types import Message
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest

from .. import loader, utils

"""
    ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  
    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà  
    ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 

                                   
    TempJoinChannel
"""

# üîí      Licensed under the GNU AGPLv3

# meta banner: https://raw.githubusercontent.com/MuRuLOSE/HikkaModulesRepo/main/assets/modbanners/tempjoinchannel.png
# meta desc: Enter the channels temporarily!
# meta developer: @BruhHikkaModules


@loader.tds
class TempJoinChannel(loader.Module):
    """Enter the channels temporarily!"""

    strings = {
        "name": "TempJoinChannel",
        "added": "<emoji document_id=5206607081334906820>‚úîÔ∏è</emoji> Channels added",
        "leaved": "<emoji document_id=5974506040828366250>üö™</emoji> <i>All the channels have disappeared...</i>"
    }   
    strings_ru = {
        "_cls_doc": "–í—Ö–æ–¥–∏ –≤ –∫–∞–Ω–∞–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ!",
        "added": "<emoji document_id=5206607081334906820>‚úîÔ∏è</emoji> –ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        "leaved": "<emoji document_id=5974506040828366250>üö™</emoji> <i>–í—Å–µ –∫–∞–Ω–∞–ª—ã –∏—Å—á–µ–∑–ª–∏...</i>"
    }

    async def client_ready(self, client, db):
        self.db = db


    def __init__(self):
        self._lock = False # if cleaning channels, cmd locking
        self._channels = self.pointer("channels", [])

    @loader.command(
        ru_doc="–î–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–ª–æ–≤–æ inline –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–∞–Ω–∞–ª—ã –æ—Ç—Ç—É–¥–∞. –õ–∏–±–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –ª—é–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–Ω–∞–ª–∞ (–∞–π–¥–∏, —Å—Å—ã–ª–∫–∏, —é–∑–µ—Ä–Ω–µ–π–º—ã). Inline dont work"
    )
    async def addchannels(self, message: Message):
        """ - Add channels, put the word inline in the arguments if you need channels from there. Or list any channel attributes (ids, links, usernames). (Inline dont work)"""
        args = utils.get_args_raw(message)

        if "inline" in args:
            pass
        else:
            channels = args.split()
            for channel in channels:
                if channel not in self._channels:
                    self._channels.extend(str(channel))
                    await self.client(JoinChannelRequest(channel))
                else:
                    pass
            
        await utils.answer(message, self.srtings["added"])

    @loader.command(
        ru_doc="–ü–æ–∫–∏–Ω—É—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    )
    async def leavechannels(self, message: Message):
        """ - Leave all channels that have been added"""
        for channel in self._channels:
            self._channels.remove(str(channel))
            await self.client(LeaveChannelRequest(channel))

        await utils.answer(message, self.strings["leaved"])
        

        
