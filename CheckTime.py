from hikkatl.types import Message
from .. import loader, utils
import aiohttp
from ..inline.types import InlineCall
import datetime
import logging


"""
    ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  
    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà  
    ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 


    CheckTime
    üìú Licensed under the GNU AGPLv3	
"""

# meta banner: https://0x0.st/HYVT.jpg
# meta desc: desc
# meta developer: @BruhHikkaModules
# requires: aiohttp

logger = logging.getLogger(__name__)


@loader.tds
class CheckTime(loader.Module):
    """Check time in your city"""

    strings = {
        "name": "CheckTime",
        "right_setcity": "<b>Is this correct?</b> Timezone: {city}, If yes, press: <b>‚úÖ Correct</b>",
        "button_right_setcity": "‚úÖ Correct",
        "button_wrong_setcity": "‚ùå Wrong",
        "city_set": "üåÜ <b>The default city is set!</b>",
        "time": "<b>Timezone:</b> {}\n<b>Time:</b> {}",
        "error": "üö´ <b>Something wrong!</b>\nYou may have entered the wrong time zone, if you can't resolve this, contact @BruhHikkaModules in the chat room",
        "select_tz": "<b>Select the time zone:</b>",
        "select_info": "<b>Select the information in the buttons:</b>",
        "general_info": "üåê <b>General information:\n\nTime: <i>{}</i>\nDate: <i>{}</i>\nDay: <i>{}</i>\nTimezone: <i>{}</i>\nDay of the week: <i>{}</i></b>",
        "day_week": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday",
        ],
        "no_tz": "‚ùå <b>There is no such time zone!</b>",
        "widget": "<b>Information about my time:</b>\n\n{}",
        "wait_widget": "üïì Wait for widget (1min, maybe more)",
    }

    strings_ru = {
        "right_setcity": "<b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b> –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {city}, –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ: <b>‚úÖ –í–µ—Ä–Ω–æ</b>",
        "button_right_setcity": "‚úÖ –í–µ—Ä–Ω–æ",
        "button_wrong_setcity": "‚ùå –ù–µ–≤–µ—Ä–Ω–æ",
        "city_set": "üåÜ <b>–ì–æ—Ä–æ–¥ –ø–æ-—É–ª–º–æ—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
        "time": "<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> <i>{}</i>\n<b>–í—Ä–µ–º—è:</b> <code>{}</code>",
        "error": "üö´ <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b>\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –µ—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Ä–µ—à–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç @BruhHikkaModules",
        "select_tz": "<b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>",
        "select_info": "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞—Å—Å–ø–æ–ª–æ–∂–µ–Ω—É—é –≤ –∫–Ω–æ–ø–∫–∞—Ö:</b>",
        "general_info": "üåê <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n–í—Ä–µ–º—è: <i>{}</i>\n–î–∞—Ç–∞: <i>{}</i>\n–î–µ–Ω—å: <i>{}</i>\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <i>{}</i>\n–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: <i>{}</i></b>",
        "day_week": [
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "–í—Ç–æ—Ä–Ω–∏–∫",
            "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥",
            "–ü—è—Ç–Ω–∏—Ü–∞",
            "–°—É–±–±–æ—Ç–∞",
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        ],
        "no_tz": "‚ùå <b>–ù–µ—Ç—É —Ç–∞–∫–æ–π —á–∞—Å–æ–≤–æ–π –∑–æ–Ω—ã!</b>",
        "widget": "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –≤—Ä–µ–º–µ–Ω–∏:</b>\n\n{}",
        "wait_widget": "üïì –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–∏–¥–∂–µ—Ç (1min, maybe more)",
        "_cls_doc": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "city",
                "Europe/Moscow",
                lambda: "For default city",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue("id", 0, lambda: "For widget"),
        )

    @loader.command(
        ru_doc=" [–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / –ù–∏—á–µ–≥–æ] - –ü–æ—Å—Ç–∞–≤—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ –ø–æ-—É–ª–º–æ–ª—á–∞–Ω–∏—é\n–ü—Ä–∏–º–µ—Ä: .set_city Europe/Moscow",
    )
    async def setcity(self, message: Message):
        """[Timezone / Nothing] - Set your city to default\nExample: .set_city Europe/Moscow"""

        args = utils.get_args_raw(message)

        if not args:
            await self.inline.form(
                text=self.strings["select_tz"],
                message=message,
                reply_markup=[
                    [
                        {
                            "text": "America/Los Angeles",
                            "callback": self._setcity,
                            "args": ("America/Los_Angeles",),
                        },
                        {
                            "text": "Europe/Moscow",
                            "callback": self._setcity,
                            "args": ("Europe/Moscow",),
                        },
                        {
                            "text": "Europe/Kiyv",
                            "callback": self._setcity,
                            "args": ("Europe/Kiyv",),
                        },
                    ]
                ],
            )

        else:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://worldtimeapi.org/api/timezone/{args}"
                ) as response:
                    if response.status == 404:
                        return await utils.answer(message, self.strings["no_tz"])

            await self.inline.form(
                text=self.strings["right_setcity"].format(city=args),
                message=message,
                reply_markup=[
                    [
                        {
                            "text": self.strings["button_right_setcity"],
                            "callback": self._setcity,
                            "args": (args,),
                        },
                        {
                            "text": self.strings["button_wrong_setcity"],
                            "action": "close",
                        },
                    ]
                ],
            )

    @loader.command(ru_doc=" [–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / –ù–∏—á–µ–≥–æ] - –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è")
    async def showtime(self, message: Message):
        """[Timezone / Nothing] - Find out the time\nExample: .show_time Europe/Moscow"""

        args = utils.get_args_raw(message)
        default = self.config["city"]

        if not args:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://worldtimeapi.org/api/timezone/{default}"
                ) as response:
                    if response.status != 200:
                        return await utils.answer(message, self.strings["error"])

                    data = await response.json()

                    datetimecity = data["datetime"]
                    abbreviation = data["abbreviation"]
                    day_of_week = data["day_of_week"]
                    day_of_year = data["day_of_year"]
                    tz = data["timezone"]
                    week_number = data["week_number"]

        else:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://worldtimeapi.org/api/timezone/{args}"
                ) as response:
                    if response.status != 200:
                        return await utils.answer(message, self.strings["error"])

                    data = await response.json()

                    datetimecity = data["datetime"]
                    abbreviation = data["abbreviation"]
                    day_of_week = data["day_of_week"]
                    day_of_year = data["day_of_year"]
                    tz = data["timezone"]
                    week_number = data["week_number"]

        await self.inline.form(
            text=self.strings["select_info"],
            message=message,
            reply_markup=[
                [
                    {
                        "text": "üåê General",
                        "callback": self._general,
                        "args": (
                            [
                                datetimecity,
                                abbreviation,
                                day_of_week,
                                day_of_year,
                                tz,
                                week_number,
                            ],
                        ),
                    },
                    {"text": "‚ùå Close", "action": "close"},
                ]
            ],
        )

    @loader.loop(autostart=True, interval=60)
    async def updwidget(self):
        if self.config["id"] != 0:
            chat_id = self.config["id"][1]
            message_id = self.config["id"][0]
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f'http://worldtimeapi.org/api/timezone/{self.config["city"]}'
                ) as response:
                    if response.status != 200:
                        return await self.client.edit_message(
                            chat_id, message_id, self.strings["error"]
                        )

                    data = await response.json()

                    datetimecity = data["datetime"]
                    day_of_week = data["day_of_week"]
                    day_of_year = data["day_of_year"]
                    tz = data["timezone"]

                    datem = datetime.datetime.fromisoformat(datetimecity)

            await self.client.edit_message(
                self.config["id"][1],
                self.config["id"][0],
                self.strings["widget"].format(
                    self.strings["general_info"].format(
                        datem.strftime("%H:%M"),
                        datem.strftime("%d.%m.%Y"),
                        day_of_year,
                        tz,
                        self.strings["day_week"][day_of_week - 1],
                    )
                ),
            )

    @loader.command(ru_doc=" [–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å / –ù–∏—á–µ–≥–æ] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç")
    async def send_widget(self, message: Message):
        """- Send widget"""
        self.config["id"] = [message.id, message.chat_id]

        await utils.answer(message, self.strings["wait_widget"])

    async def _setcity(self, call: InlineCall, city: str):
        self.config["city"] = city

        await call.edit(self.strings["city_set"])

    async def _nothing(self, call: InlineCall):
        await call.answer("It's nothing, have a nice day :)")

    async def _general(self, call: InlineCall, data: list):
        datem = datetime.datetime.fromisoformat(data[0])

        await call.edit(
            reply_markup=[
                [{"text": "‚è™ Back", "callback": self._showtime_menu, "args": (data,)}]
            ],
            text=self.strings["general_info"].format(
                datem.strftime("%H:%M"),
                datem.strftime("%d.%m.%Y"),
                data[3],
                data[4],
                self.strings["day_week"][data[2] - 1],
            ),
        )

    async def _showtime_menu(self, call: InlineCall, data: list):
        await call.edit(
            text=self.strings["select_info"],
            reply_markup=[
                [
                    {"text": "üåê General", "callback": self._general, "args": (data,)},
                    {"text": "‚ùå Close", "action": "close"},
                ]
            ],
        )
