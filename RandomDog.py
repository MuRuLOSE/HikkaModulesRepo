from hikkatl.types import Message
from hikkatl.errors.rpcerrorlist import WebpageCurlFailedError
from .. import loader, utils
import aiohttp
from ..inline.types import InlineCall
import logging

"""
    ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  
    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà  
    ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 


    RandomDog
    üìú Licensed under the GNU AGPLv3	
"""

# meta banner: https://0x0.st/HYVq.jpg
# meta desc: desc
# meta developer: @BruhHikkaModules

# requires: aiohttp

logger = logging.getLogger(__name__)


@loader.tds
class RandomDogs(loader.Module):
    """Get random pictures with dogs"""

    strings = {
        "name": "RandomDogs",
        "dog": "üê∂ <b>There's your doggy!</b>",
        "update": "üîÑ Update",
        "close": "‚ùå Close",
        "wait": "‚åö <b>Wait a little while and you'll see a doggie</b>",
        "error": "üò¢ Looks like the API returned a non-existent image :(\n\nü¶â Tip: Try update the image",
    }
    strings_ru = {
        "dog": "üê∂ <b>–í–æ—Ç —Ç–≤–æ—è —Å–æ–±–∞—á–∫–∞!</b>",
        "update": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        "close": "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        "wait": "‚åö <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–æ–±–∞—á–∫—É</b>",
        "error": "üò¢ –ü–æ—Ö–æ–∂–µ —á—Ç–æ API –≤–µ—Ä–Ω—É–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É :(\n\nü¶â –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É",
    }

    def __init__(self):
        self.api = "https://random.dog/"

        self.markup = [
            [
                {"text": self.strings["update"], "callback": self.update},
                {"text": self.strings["close"], "action": "close"},
            ]
        ]

    async def get_data(self):
        async with aiohttp.ClientSession() as session:
            async with session.get(self.api + "woof.json") as res:
                data = await res.json()

        return data

    @loader.command(
        ru_doc=" - –ü—Ä–æ—Å—Ç–æ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–±–∞—á–∫–∏",
    )
    async def catchdog(self, message: Message):
        """- Just return the picture of the dog"""

        await utils.answer(message, self.strings["wait"])

        data = await self.get_data()

        try:
            await self.inline.form(
                message=message,
                text=self.strings["dog"],
                photo=data["url"],
                reply_markup=self.markup,
            )
        except WebpageCurlFailedError:
            await self.inline.form(
                message=message, text=self.strings["error"], reply_markup=self.markup
            )

    async def update(self, call: InlineCall):
        await call.edit(text=self.strings["wait"])

        data = await self.get_data()

        try:
            await call.edit(
                text=self.strings["dog"], photo=data["url"], reply_markup=self.markup
            )
        except WebpageCurlFailedError:
            await call.edit(text=self.strings["error"], reply_markup=self.markup)
